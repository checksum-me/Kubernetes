#this command shows the config list including username and email 
git config --list

#set username using the below command
git config --global user.name "your Name"

#set email using the below command
git config --global user.email "your_email@example.com"

#git cheat sheet
https://education.github.com/git-cheat-sheet-education.pdf


git log --graph --oneline

-----------------------------------------
So you can create a repo locally and when you are ready to push the same to hosting site like github or gitlab, etc. you can follow the below steps

1. go to the folder via terminal where the repo resides
2. git status and check the current status of the repo
3. for our example lets consider gitlab, go to your online repo and get the URL ( http://git.example.com/username/my-repo.git)
4. now in the terminal, use the below commands
    git remote add origin <URL>
    git push origin master (assuming your master repo is what you want to push to the remote REPO)
5. if prompted for username and pass, provide your creds for the online hosting site
6. Refresh the github and view that the Repo is now synced with the changes from your local

-----------------------------------------
git clone <ssh link>

this will clone the remote repo locally

-----------------------------------------
git push origin (alias) master (branch)

this command will push the changes made locally to the remote (origin) and specified branch (master)

-----------------------------------------

git pull origin master

This is two commands in one i.e. "git fetch origin master" and "git merge origin/master"
This will fetch and merge the origin/master into the local master

git branch -a -> shows all the branches , including the remote branch names

-----------------------------------------
for other public repos where we dont have access, we can fork the repo, work on our changes, commit to our master, then create a pull request to merge from our master to their master. If the PR is approved and merged our changes will be in the Open source project. Happy coding!

-----------------------------------------

git checkout master 

This command helps to switch to master branch

-----------------------------------------

git rebase -i HEAD~3

this comamnd will ask what to do with the last three commits. I did pick the first one in the editor that opens and mentioned squash for the next two commits. Now all the 3 commits were merged into 1. 

-----------------------------------------

switch to the branch where you need the file 

branch - master - filea has the latest changes
branch - feature/game1 - filea is there but doesnt have the master filea changes

now in this scenario we need the filea changes from master to feature/game1. 
to do this cherry pick the changes using the below command

git checkout feature/game1
git cherry <commit-number-from-master>

-----------------------------------------

git revert <commit-id> or git revert Head~0

this command can be used to revert the changes. either specify the commit id to revert or for the last commited changes use HEAD~0

-----------------------------------------

git reset --soft HEAD~1

This will retain the file of that commit and then remove the commit

if --hard is used, then the files of that commit also will be deleted

-----------------------------------------

git stash - to stash the current staging area files into the stash
git stash list - to list the files stashed

git stash pop - puts the stash back to the staging area

git stash show stash@{1} - this shows the content in stash

Note: stash works across branches

-----------------------------------------

git reflog - shows the state of the repo i.e. changes in the repo
got log - shows the state of the commits

-----------------------------------------